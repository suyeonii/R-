sum(1,2,NA,na.rm=F)
class(NA)
class(NULL)
txt read.csv("factor_test.csv")
txt read.csv("factor_test.txt")
txt <- read.csv("factor_test.txt")
txt <- read.csv("factor_test.txt")
txt <- read.csv("factor_test.csv.txt")
txt1
txt <- read.csv("factor_test.csv.txt")
txt <- read.csv("factor_test.csv.txt")
txt <- read.csv("factor_test.csv.txt")
setwd("d:/Workspace/TIL/R_Data_Analysis/Part3/Data")
txt <- read.csv("factor_test.csv.txt")
txt <- read.csv("factor_test.txt")
txt <- read.txt("factor_test.txt")
txt <- read.csv("factor_test.txt")
txt <- read.csv("factor_test.txt")
txt <- read.csv("factor_test.csv")
txt <- read.csv("factor_test.csv.txt")
txt <- read.csv("factor_test.csv.txt")
txt1 <- read.csv("factor_test.txt")
txt1 <- read.txt("factor_test.txt")
txt1 <- read.csv("factor_test.csv.txt")
txt1 <- read.csv("factor_test.csv.txt")
txt1
factor1 <- factor(txt1$blood)
factor1
summary(factor1)
sex1 <- factor(txt1$sex)
summary(sex1)
Sys.Date()
Sys.time()
date()
scan1 <- scan('scan_1.txt')
scan
scan1
scan1 <- scan('scan_1.txt')
scan2 <- scan('scan_2.txt');scan2
scan2 <- scan('scan_2.txt',what="");scan2
scan3 <- scan('scan_3.txt',what='');scan3
scan4 <- scan('scan_4.txt',what='');scan4
input <- scan()
input <- scan()
input
input <- scan(what='')
input
input <- scan(what='')
input
input3 <- readline0
input3 <- readline()
input3
input3
input4 <- readline('are you ok? :')
input4
input5 <- readLines('scan_4.txt')
input5
fruits <- read.table('fruits.txt')
fruits
fruits <- read('fruits.txt')
fruits <- read.table('fruits.txt',header=T);fruits
fruits2 <- read.table(fruits2.txt);fruit2
fruits2 <- read.table('fruits2.txt'');fruit2
fruits2 <- read.table('fruits2.txt');fruit2
fruits2 <- read.table('fruits2.txt');fruits2
fruits2 <- read.table('fruits_2.txt');fruits2
fruits2 <- read.table(fruits_2.txt);fruits2
fruits2 <- read.table('fruits_2.txt',skip=2)
fruits2
fruits2 <- read.table('fruits_2.txt',nrows = 2);fruits2
f2top <- read.table('fruits_2.txt');fruits2
f2top; f2bottom
f2bottom <- read.table('fruits_2.txt',skip = 3)
f2top
f2top <- read.table('fruits_2.txt',nrows = 2)
f2bottom <- read.table('fruits_2.txt',skip = 3)
f2top; f2bottom
fruits3 <- read.csv('fruits_3.csv');fruits3
fruits4 <- read.csv('fruits_4.csv');fruits4
fruits4 <- read.csv('fruits_4.csv',header = T);fruits4
fruits4 <- read.csv('fruits_4.csv',header = F);fruits4
label <- c('NO','NAME','PRICE','QTY')
fruits4 <- read.csv('fruits_4.csv',header = F,col.names = label);fruits4
installed.packages("googleVis")
install.packages("googleVis")
library(googleVis)
install.packages('sqldf')
library(sqldf)
fruits
install.packages("googleVis")
install.packages("googleVis")
library(googleVis)
install.packages('sqldf')
install.packages("sqldf")
library(sqldf)
fruits
install.packages("sqldf")
install.packages("sqldf")
library(sqldf)
fruits
library(googleVis)
install.packages("googleVis")
install.packages("googleVis")
library(googleVis)
install.packages("sqldf")
library(sqldf)
fruits
Fruits
write.csv(Fruits,"Fruits_sql.csv",qoute=F,row.names = F)
write.csv(Fruits,"Fruits_sql.csv",quote=F,row.names = F)
fruits_2 <- read.csv.sql("Fruits_sql.csv",sql="SELECT * FROM file WHERE YEAR=2008")
fruits_2
Fruits[year==2008,]
Fruits["year"==2008,]
Fruits["year"==2008]
Fruits["year"=='2008']
Fruits
install.packages("XLConnect")
install.packages("XLConnect")
library(XLConnect)
install.packages("XLConnect")
install.packages("XLConnect")
library(XLConnect)
setwd("c:\\r_temp")
data1 <- loadWorkbook("fruits_6.xls",create=T)
data2 <- readWorksheet(data1,sheet="sheet1",
startRow=1,
endRow=8,
startCol=1,
ednCol=5)
data2 <- readWorksheet(data1,sheet="sheet1",
startRow=1,
endRow=8,
startCol=1,
ednCol=5)
data2 <- readWorksheet(data1,sheet="sheet1",
startRow=1,
endRow=8,
startCol=1,
endCol=5)
data2
fruits6 <- read.delim("clipboard",header = T);fruits6
fruits6 <- read.delim("clipboard",header=T)
fruits6
install.packages(readxl)
install.packages('readxl')
library(readxl)
na = "NA") # Character vector of strings to use for missing values
na = "NA" # Character vector of strings to use for missing values
cust_profile <- read_excel(fruits_6.xls", # path
sheet = "Sheet1", # sheet name to read from
range = "A2:D6", # cell range to read from
col_names = TRUE, # TRUE to use the first row as column names
col_types = "guess", # guess the types of columns
na = "NA" # Character vector of strings to use for missing values
cust_profile <- read_excel(fruits_6.xls", # path
sheet = "Sheet1" # sheet name to read from
range = "A2:D6" # cell range to read from
col_names = TRUE # TRUE to use the first row as column names
col_types = "guess" # guess the types of columns
na = "NA" # Character vector of strings to use for missing values
fruits6
fruits_6
fruits7
fruits7 <- read_excel(fruits_6.xls", # path
range = "A2:D6" # cell range to read from
col_types = "guess" # guess the types of columns
fruits7 <- read_excel(fruits_6.xls", # path
sheet = "Sheet1" # sheet name to read from
range = "A2:D6" # cell range to read from
col_names = TRUE # TRUE to use the first row as column names
col_types = "guess" # guess the types of columns
na = "NA" # Character vector of strings to use for missing values
fruits7
fruits7 <- read_excel(fruits_6.xls", # path
sheet = "Sheet1" # sheet name to read from
range = "A2:D6" # cell range to read from
col_names = TRUE # TRUE to use the first row as column names
col_types = "guess" # guess the types of columns
na = "NA" # Character vector of strings to use for missing values
fruits7
fruits7 <- read_excel(fruits_6.xls", # path
sheet = "Sheet1", # sheet name to read from
range = "A2:D6", # cell range to read from
col_names = TRUE, # TRUE to use the first row as column names
col_types = "guess", # guess the types of columns
na = "NA") # Character vector of strings to use for missing values
fruits7 <- read_excel(fruits_6.xls", # path
sheet = "Sheet1", # sheet name to read from
range = "A2:D6" # cell range to read from
col_names = TRUE # TRUE to use the first row as column names
col_types = "guess" # guess the types of columns
na = "NA") # Character vector of strings to use for missing values
fruits7
fruits7 <- read_excel(fruits_6.xls", # path
sheet = "Sheet1", # sheet name to read from
range = "A2:D6" # cell range to read from
col_names = TRUE # TRUE to use the first row as column names
col_types = "guess" # guess the types of columns
na = "NA" # Character vector of strings to use for missing values
fruits7
source('~/.active-rstudio-document', encoding = 'UTF-8')
na = "NA") # Character vector of strings to use for missing values
fruits7 <- read_excel(fruits_6.xls", # path
sheet = "Sheet1"# sheet name to read from
range = "A2:D6"# cell range to read from
col_names = TRUE# TRUE to use the first row as column names
col_types = "guess"# guess the types of columns
na = "NA" #Character vector of strings to use for missing values
fruits7
fruits7 <- read_excel(fruits_6.xls", # path
sheet = "Sheet1"# sheet name to read from
range = "A2:D6"# cell range to read from
col_names = TRUE# TRUE to use the first row as column names
col_types = "guess"# guess the types of columns
na = "NA" #Character vector of strings to use for missing values
fruits_2
fruits_3 <- subset(Fruits, Fruits$Year==2008);fruits_3
fruits_2 <- subset(Fruits, Fruits$Year==2008);fruits_2
fruits_2 <- subset(fruits, fruits$Year==2008);fruits_2
fruits_2 <- subset(Fruits, fruits$Year==2008);fruits_2
# Function
?subset()
vec1 <- c(1,2,3,4,5)
vec1 <- c(1:5)
vec2 <- c('a','b','c','d','e')
max(vec1)
max(vec2)
subset
mean(vec1)
mean(vec2)
min(vec1)
sd(vec1)
sum(vec1)
var(vec1)
library(googleVis)
Fruits
aggregate(Sales~Year,Fruits,sum)
aggregate(Sales~Fruit,Fruits,sum)
aggregate(Sales~Fruit,Fruits,max)
<-
<-
agregate(Sales~Fruit+Year,Fruits,max)
<-
aggregate(Sales~Fruit+Year,Fruits,max)
mat1 <- matrix(c(1,2,3,4,5,6,),nrow=2,byrow=T)
mat1 <- matrix(c(1,2,3,4,5,6),nrow=2,byrow=T)
mat1
apply(mat1,1,sum)
apply(mat1,2,sum)
apply(mat1[,c(2,3)],2,max)
apply(mat1,1,prod)
apply(mat1[,c(2,3)],2,max)
apply(mat1[,c(2,3)])
apply(mat1[,c(2,3)])
apply(mat1[,c(2,3),1,SUM])
apply(mat1[,c(2,3)],2,max)
apply(mat1[,c(2,3),1,SUM])
apply(mat1[,c(2,3),1,sum])
apply(mat1[,c(2,3)],1,sum])
apply(mat1[,c(2,3)],1,sum)
list1 <- Fruits$Sales; list1
list2 <- list(Fruits$profit); list2
lapply(c(list1,list2), max
lapply
apply
lappoly
list1 <- list(Fruits$Sales); list1
list2 <- list(Fruits$profit); list2
lapply(c(list1,list2), max
sapply(c(list1,list2),max)
lapply(c(list1,list2), max
lapplyFruits [c,(4,5,max)]
sapplyc(list1,list2),max)
list1 <- list(Fruits$Sales); list1
list2 <- list(Fruits$profit); list2
list2 <- list(Fruits$Profit); list2
lapply(c(list1,list2), max
lapplyFruits [c,(4,5,max)]
sapplyc(list1,list2),max)
Fruits
tapply(Sales,Fruit,sum)
tapply(Sales,Fruits,sum)
attach(Fruits)
tapply(Sales,Fruit,sum)
tapply(Sales,Year,sum)
vec1 <- c(1:5)
vec2 <- seq(10:50:10)
vec2 <- seq(10:50,10)
vec2 <- seq(10,50,10)
vec3 <- seq(100,500,100)
mapply(sum,vec1,vec2,vec3)
data1 <- scan(data1.csv)
data1 <- read.csv(data1.csv)
data1 <- read.csv('data1.csv')
read.csv('data1.csv')
read.csv('data1.csv')
data1<-read.csv('data1.csv')
data1 <- read.csv('data1.csv')
data1
data1 <- read.csv('data1.csv');data1
aggregate(Sales~Year,Fruits,sum)
aggregate(Sales~Year,data1,sum)
data1 <- read.csv('data1.csv');data1
aggregate(Year~Age,data1,sum)
aggregate(Year~data,data1,sum)
aggregate(Year~predvars,data1,sum)
aggregate(Year~Old,data1,sum)
apply(mat1,1,sum)
list1 <- list(Data1$Year)
list1 <- list(Data$Year)
list1 <- list(data1$Year)
list1
attach(data1)
tapply(Year,data,sum)
tapply(Year,data1,sum)
tapply(Sales,Year,sum)
tapply(연령별,연도별,sum)
apply(Year,sum)
apply(Year,Sales,sum)
tapply(Year,sum)
apply(mat,q,2,sum)
apply(mat1,2,sum)
attach(data1)
apply(mat1,2,sum)
apply(mat1,5,sum)
attach(data1)
apply(mat1,2,sum)
vec1('20대','30대','40대','50대','60대이상')
lapply(data1,[,c(4,5)],sum)
lapply(data1,c(4,5),sum)
data1 <- read.csv('data1.csv');data1
attach(data1)
data1 <- read.csv('data1.csv');data1
list1 <- list(data1$X2000년)
list1 <- list(data1$X2000년); list1
list1 <- list(data1$연령별); list1
list1 <- list(data1$'연령별'); list1
list1 <- list(data1$'연령별',sum); list1
list <- list(data1$X2000년);list
apply(mat1,2,sum)
mat1 <- matrix(c(1:14),nrow=5,byrow=1)
mat1 <- matrix(c(1:14),nrow=5,byrow=T)
apply(mat1,2,sum)
apply(mat,2,sum)
apply(mat2,2,sum)
apply(mat1,2,sum)
list <- list(data1$연령별)
list <- list(data1$년도별)
list
apply('연령별',2,sum)
apply('년도별',2,sum)
apply('년도별',1,sum)
# 연습문제
data1 <- read.csv("data1.csv");data1
apply(data1[,c(2:15)],2,sum)
apply(data1[,-1],1,sum)
data2 <- read.csv("1-4호선승하차승객수.csv")
data2 <- read.csv("1-4호선승하차승객수.csv");data2
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차,노선번호,sum)
tapply(승차,하차,sun)
tapply(승차,하차,sum)
tapply(승차,sum)
apply(승차,sum)
sapply(data2[,c(3,4)],sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
aggregate(승차+하차~노선번호,data2,sum)
#Function
mat1 <- matrix(c(1:6),nrow=2,byrow=T)
#Function
mat1 <- matrix(c(1:6),nrow=2,byrow=T);mat
#Function
mat1 <- matrix(c(1:6),nrow=2,byrow=T);mat1
a <- c(1,1,1)
a <- rep(1,3)
sweep(mat1,2,a)
b <- matrix(c(2,2))
b <- matrix(c(2,2));b
sweep(mat1,1,b)
a <- c(1:5); length(a)
length(mat1)
library(googleVis)
length(Fruits)
log(10)
log10(10)
sin(pi)
abs(-1)
v2 <- c(1,-2,3,-4)
avs(v2)
abs(v2)
ceiling(2.3)
floor(2.3)
ceiling(-2.3)
floor(2.3)
floor(-2.3)
round(2.5)
round(2.6)
round(2.49)
round(2.5)
?round
round(2.50)
round(2.501)
round(2.499)
round(2.5)
choose(5,3)
#함수를 직접 만들어 사용하기~~~~
myfunc <- function(){
return(10)
}
myfunc()
myfunc2 <- function(x) {
y=x*x;
return(y)
}
myfunc2()
myfunc2()
myfunc2(-3)
myfunc3 <- function(a,b){
c <- -a*b
return(c)
}
myfunc3(3,2)
myfunc3(3,2)
myfunc3 <- function(a,b){
c <- a*-b
return(c)
}
myfunc3(3,2)
myfunc3 <- function(a,b){
c <- -a+b
return(c)
}
myfunc3(3,2)
myfunc3(2,3)
myfunc3 <- function(a,b){
c <- a-b
return(c)
}
myfunc3(3,2)
myfunc3(2,3)
myfunc4 <- function(a,b){
c <- asb(a-b)
return(c)
}
myfunc4(2,3)
myfunc4 <- function(a,b){
c <- abs(a-b)
return(c)
}
myfunc4(2,3)
myfunc4(2,3)
myfunc4(3,2)
myfunc4 <- function(a,b){
c <- abs(a,b)
return(c)
}
myfunc4(2,3)
myfunc4(3,2)
myfunc4 <- function(a,b){
c <- abs(a-b)
return(c)
}
myfunc4(2,3)
myfunc4(3,2)
myfunc4 <- function(a,b){
c <- abs(myfunc3(a,b))
return(c)
}
myfunc4(2,3)
myfunc4(3,2)
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
date4 <- seq(from=as.Date("2015-01-01")
to=as.Date("2015-01-31")by=1)
date4 <- seq(from=as.Date("2015-01-01")
to=as.Date("2015-01-31"),by=1)
date4 <- seq(from=as.Date("2015-01-01"),
to=as.Date("2015-01-31"),by=1)
date4
vec <- c('사과','배','감','버섯','고구마')
vec1 <- c('사과','배','감','버섯','고구마')
vec1(3)
vec1(-3)
vec1[-3]
vec1 <- c('봄','여름','가을','겨울')
vec2 <- c('봄','여름','늦가을','초가을')
vec1+vec2
union(vec1+vec2)
union(vec1,vec2)
setdiff(vec1,vec2)
intersect(vec1,vec2)
season <- matrix('봄','여름','가을','겨울',nrow=2,byrow1)
season <- matrix(c(봄','여름','가을','겨울'),nrow=2,byrow1)
season <- matrix c(봄','여름','가을','겨울'),nrow=2,byrow1)
season <- matrix (c(봄','여름','가을','겨울'),nrow=2,byrow1)
season <- matrix (c('봄','여름','가을','겨울'),nrow=2,byrow1)
season <- matrix (c('봄','여름','가을','겨울'),nrow=2,byrow=T)
season <- matrix (c('봄','여름','가을','겨울'),nrow=2,byrow=T);season
season <- matrix (c('봄','여름','가을','겨울'),nrow=2,);season
season <- matrix (c('봄','여름','가을','겨울'),nrow=2,);season
season <- matrix (c('봄','여름','가을','겨울'),nrow=2,byrow=T);season
matrix[,2]
season[,2]
season2 <- rbind(seoson,c('초봄','초가을'))
season2 <- rbind(seoson,c(초봄,초가을))
season2 <- rbind(seoson2,c(초봄,초가을))
season2 <- rbind(matrix,c(초봄,초가을))
season2 <- rbind(matrix,c('초봄','초가을'))
season2 <- rbind(mat,c('초봄','초가을'))
