ggplot(suv, aes(x=reorder(manufacturer, -mean.cty), y=mean.cty)) + geom_bar()
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
suv
ggplot(suv, aes(x=reorder(manufacturer, -mean.cty), y=mean.cty)) + geom_bar()
ggplot(mpg, aes(x=cty, y=hwy, group=1)) + geom_point()
ggplot(midwest, aes(x=poptotal, y=popasian), group=1) + geom_point()
ggplot(midwest, aes(x=poptotal, y=popasian)) + geom_point() +
3. 어떤 회사에서 생산한 "suv" 차종의 도시 연비가 높은지 알아보려고 합니다. "suv" 차종을 대상으로 평균 cty(도시 연비)가
ggplot(midwest, aes(x=poptotal, y=popasian)) + geom_point() +
3. 어떤 회사에서 생산한 "suv" 차종의 도시 연비가 높은지 알아보려고 합니다. "suv" 차종을 대상으로 평균 cty(도시 연비)가
ggplot(midwest, aes(x=poptotal, y=popasian)) + geom_point()
ggplot(midwest, aes(x=poptotal, y=popasian)) + geom_point() + xlim(0,500000) + ylim(0,10000)
ggplot(midwest, aes(x=poptotal, y=popasian)) + geom_point() + xlim(0,500000) + ylim(0,10000)
suv <- filter(mpg, class == "suv") %>% group_by(manufacturer) %>% summarise(mean.cty=mean(cty))
ggplot(suv, aes(x=(manufacturer), y=cty) + geom_bar() + head(5)
suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(mean.cty = mean(hwy)) %>%
arrange(desc(mean.cty)) %>%
head(5)
suv <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(mean.cty = mean(hwy)) %>%
arrange(desc(mean.cty)) %>%
head(5)
ggplot(suv, aes(x=reorder(manufacturer, -mean.cty), y=mean.cty)) + geom_bar()
ggplot(mpg, aes(x=reorder(manufacturer, -mean.cty), y=mean.cty)) + geom_bar()
ggplot(suv, aes(x=reorder(manufacturer, -mean.cty), y=mean.cty)) + geom_bar()
ggplot(suv, aes(x=reorder(manufacturer, mean.cty), y=mean.cty)) + geom_bar()
ggplot(suv, aes(x=reorder(manufacturer, mean.cty), y=cty)) + geom_bar()
ggplot(suv, aes(x=reorder(manufacturer, mean.cty), y=mean.cty)) + geom_bar()
ggplot(suv, aes(x=reorder(manufacturer, mean.cty), y=mean.cty)) + geom_bar()
ggplot(suv, aes(x=reorder(manufacturer, mean.cty), y=mean.cty)) + geom_col()
ggplot(suv, aes(x=reorder(manufacturer, -mean.cty), y=mean.cty)) + geom_col()
arrange(mpg$class)
filter(mpg$class)
filter(mpg$class)
ggplot(mpg, x=class) + geom_bar()
ggplot(mpg, (x=class)) + geom_bar()
ggplot(mpg, aes(x=class)) + geom_bar()
View(economics)
ggplot(economics, aes(x=psavert)) + geom_line()
ggplot(economics, aes(x=psavert, y=date)) + geom_line()
ggplot(economics, aes(x=psavert), y=date) + geom_line()
, y=date)
ggplot(economics, aes(x=psavert, y=date)) + geom_line()
class
class <- filter(class == "suv")
compact <- filter(class == "compact")
compact <- filter(class == "compact")
compact <- filter(mpg, class == "compact")
subcompact <- filter(mpg, class == "subcompact")
suv0<- filter(mpg, class == "suv")
ggplot(compact, subcompact, suv0) + geom_boxplot()
ggplot(ase(compact, subcompact, suv0)) + geom_boxplot()
ggplot(aes(compact, subcompact, suv0)) + geom_boxplot()
ggplot(mpg,aes(compact, subcompact, suv0)) + geom_boxplot()
ggplot(mpg,aes(x=compact,subcompact, suv0),y=cty) + geom_boxplot()
ggplot(mpg,aes(x=compact,subcompact, suv0,y=cty)) + geom_boxplot()
ggplot(mpg,aes(x=compact,subcompact,suv0, y=cty)) + geom_boxplot()
ggplot(aes(x=class, y=cty)) + geom_boxplot()
ggplot(mpg,aes(x=class, y=cty)) + geom_boxplot()
class <- filter(mpg, class == "compact") | filter(mpg, class == "subcompact") | filter(mpg, class == "suv")
class <- filter(mpg, class == "compact" | "subcompact" | "suv")
class <- filter(mpg, class == "compact" | "subcompact" | "suv")
class <- filter(class == "compact" | "subcompact" | "suv")
class <- filter(mpg, class == "compact" | class == "subcompact" | class == "suv")
ggplot(mpg,aes(x=class, y=cty)) + geom_boxplot()
class <- filter(mpg, class == "compact" | class == "subcompact" | class == "suv")
ggplot(mpg,aes(x=class, y=cty)) + geom_boxplot()
ggplot(class, aes(x=class, y=cty)) + geom_boxplot()
View(diamonds)
ggplot(diamonds, aes(x=cut) + geom_bar
ggplot(diamonds, aes(x=cut) + geom_bar()
ggplot(diamonds, aes(x=cut)) + geom_bar()
ggplot(diamonds, aes(x=cut)) + geom_bar() + main="cut count"
ggplot(diamonds, aes(x=cut)) + geom_bar(main="cut count")
ggplot(diamonds, aes(x=cut),main="cut count") + geom_bar()
ggplot(diamonds, aes(x=cut)) + geom_bar() + title="cut count"
ggplot(diamonds, aes(x=cut)) + geom_bar() , title="cut count"
ggplot(diamonds, aes(x=cut)) + geom_bar(title="cut count")
ggplot(diamonds, aes(x=cut),title="cut count") + geom_bar()
ggplot(diamonds, aes(x=cut)) + geom_bar() + geom_text(aes(title="cut count"))
ggplot(diamonds, aes(x=cut)) + geom_bar() + geom_text(title="cut count")
ggplot(diamonds, aes(x=cut, color=factor(am))) + geom_bar()
ggplot(diamonds, aes(x=cut, color=factor(rainbow)) + geom_bar()
ggplot(diamonds, aes(x=cut, color=factor(rainbow)) + geom_bar()
ggplot(diamonds, aes(x=cut, color=factor(rainbow))) + geom_bar()
ggplot(diamonds, aes(x=cut, color="green")) + geom_bar()
ggplot(diamonds, aes(x=cut, color="green")) + geom_bar() + ggtitle("컷의 돗수")
ggplot(diamonds, aes(x=cut, color="blue")) + geom_bar() + ggtitle("컷의 돗수")
ggplot(diamonds, aes(x=cut, color="red")) + geom_bar() + ggtitle("컷의 돗수")
ggplot(diamonds, aes(x=cut)) + geom_bar() + ggtitle("컷의 돗수")
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수")
ggplot((diamonds, aes(x=cut, y=price)) + geom_line()
ggplot(diamonds, aes(x=cut, y=price)) + geom_line()
ggplot(diamonds, aes(x=price, y=cut)) + geom_line()
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수")
cut <- group_by(diamonds$cut)
cut <- group_by=(diamonds$cut)
cut <- group_by(diamonds == "cut")
cut <- group_by(c(diamonds) == "cut")
cut <- group_by(c(diamonds == "cut"))
cut <- diamonds %>% group_by(cut)
cut <- diamonds %>% group_by(cut); cut
cut <- group_by(diamonds %in% cut)
cut
cut <- group_by(diamonds$cut);cut
cut <- group_by(c(diamonds$cut));cut
cut <- group_by=(c(diamonds$cut));cut
F <- Diamonds %>% filter(class == "Fair")
F <- diamonds %>% filter(class == "Fair")
F <- diamonds %>% filter(cut == "Fair")
G <- diamonds %>% filter(cut == "Good")
V <- diamonds %>% filter(cut == "Very Good")
P <- diamonds %>% filter(cut == "Premium")
I <- diamonds %>% filter(cut == "Ideal")
ggplot(diamonds, aes((x=F,G,V,P,I), y=cut)) + geom_line()
ggplot(diamonds, aes((x="F","G","V","P","I"), y=cut)) + geom_line()
ggplot(diamonds, aes((x="F","G","V","P","I"), y=cut) + geom_line()
ggplot(diamonds, aes(x="F","G","V","P","I"), y=cut) + geom_line()
ggplot(diamonds, aes((x=F,G,V,P,I), y=cut) + geom_line()
ggplot(diamonds, aes(x=c(F,G,V,P,I), y=cut) + geom_line()
ggplot(diamonds, aes(x=c(F,G,V,P,I), y=cut)) + geom_line()
ggplot(data=c(F,G,V,P,I), y=cut)) + geom_line()
ggplot(aes(x=cut), y=price) + geom_line()
ggplot(aes(x=cut, y=price)) + geom_line()
ggplot(diamonds, aes(x=cut, y=price)) + geom_line()
ggplot(diamonds, aes(x=cut, y=price)) + geom_point()
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수")
gr1 <- ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수")
gr1 + geom_point(aes(y=price))
F <- mean(diamonds$cut)
F <- mean(diamonds$Fair)
tapply(diamonds$cut)
tapply(diamonds$cut,Fair)
tapply(diamonds$cut,mean)
tapply(cut$fair,cut$Good,mean)
filter(diamonds$cut == "Fair")
filter(diamonds, cut == "Fair")
F <- filter(diamonds, cut == "Fair")
mean(F)
mean(F$price)
F <- filter(diamonds, cut == "Fair") %>% mean(F$price)
F <- filter(diamonds, cut == "Fair") , mean(F$price)
F <- filter(diamonds, cut == "Fair") ; mean(F$price)
G <- filter(diamonds, cut == "Good") ; mean(F$Good)
G <- filter(diamonds, cut == "Good") ; mean(G$price)
V <- filter(diamonds, cut == "Very Good") ; mean(V$price)
P <- filter(diamonds, cut == "Premium") ; mean(P$price)
I <- filter(diamonds, cut == "Ideal") ; mean(I$price)
gr1 + geom_point(aes(x=cut, y=c(F,G,V,P,I)))
gr1 + geom_point(aes(x=cut, y=(F,G,V,P,I)))
gr1 + geom_point(aes(x=cut, y=c("F","G","V","P","I")))
ggplot(aes(x=cut, y=c("F","G","V","P","I")))
ggplot(diamonds, aes(x=cut, y=c("F","G","V","P","I"))) + geom_line()
ggplot(c(F,G,V,P,I), aes(x=cut, y=c("F","G","V","P","I"))) + geom_line()
ggplot(c(F,G,V,P,I), aes(x=cut, y=price)) + geom_line()
F <- filter(diamonds, cut == "Fair") ; mean(F$price)
G <- filter(diamonds, cut == "Good") ; mean(G$price)
V <- filter(diamonds, cut == "Very Good") ; mean(V$price)
P <- filter(diamonds, cut == "Premium") ; mean(P$price)
I <- filter(diamonds, cut == "Ideal") ; mean(I$price)
gr1 <- ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수")
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수")
ggplot(data=diamonds, aes(x=cut, y=price))
ggplot(data=diamonds, aes(x=cut, y=price)) + geom_line()
ggplot(data=diamonds, aes(x=cut, y=price)) +  geom_bar(stat='identity')
ggplot(data=diamonds, aes(x=cut, y=price)) +  geom_bar(stat='identity')
ggplot(data=diamonds, aes(x=cut, y=price)) +  geom_bar
ggplot(data=diamonds, aes(x=cut, y=price)) +  geom_bar()
ggplot(data=diamonds, aes(x=cut, y=price)) + geom_bar((stat='identity'))
ggplot(data=diamonds, aes(x=cut, y=price)) + geom_bar((stat='identity'))
ggplot(data=diamonds, aes(x=cut, y=price)) + geom_bar()
stat='identity'
ggplot(data=diamonds, aes(x=cut, y=price)) + geom_bar(stat='identity')
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수")
ggplot(data=diamonds, aes(x=cut, y=price)) + geom_bar(stat='identity')
ggplot(diamonds, aes(cut, color, fill=group)) + geom_bar(stat='identity')
ggplot(diamonds, aes(cut, color, fill=group)) +
geom_bar(stat='identity', position = 'dodge') + coord_flip()
ggplot(diamonds, aes(cut, color, fill=price)) +
geom_bar(stat='identity', position = 'dodge') + coord_flip()
ggplot(diamonds, aes(cut, color, fill=price))+
geom_bar(stat='identity', position = 'dodge')
ggplot(diamonds, aes(cut, color, fill=price))+
geom_line(stat='identity', position = 'dodge')
ggplot(diamonds, aes(cut, color, fill=price)) +
geom_bar(stat='identity', position = 'dodge') + coord_flip()
ggplot(diamonds, aes(price, color, fill=cut))+
geom_bar(stat='identity', position = 'dodge')
ggplot(diamonds, aes(cut, price, fill=color))+
geom_bar(stat='identity', position = 'dodge')
ggplot(diamonds, aes(cut, color, fill=price)) +
geom_bar(stat='identity', position = 'dodge') + coord_flip()
install.packages("ggplot2"); library(ggplot2)
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수") + scale_fill_manual(values = c("#CCEEFF", "#FFDDDD")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수") + scale_fill_manual(values = c("#CCEEFF", "#FFDDDD")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수") + scale_fill_manual(values = c("#CCEEFF", "#FFDDDD")
scale_fill_manual(values = c("#CCEEFF", "#FFDDDD")
install.packages("gcookbook")
library(gcookbook)
scale_fill_manual(values = c("#CCEEFF", "#FFDDDD")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수") +
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수") + scale_fill_manual(values = c("#CCEEFF", "#FFDDDD")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue"+ scale_fill_manual(values = c("#CCEEFF", "#FFDDDD")) + geom_bar() + ggtitle("컷의 돗수")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(scale_fill_manual(values = c("#CCEEFF", "#FFDDDD")) + ggtitle("컷의 돗수")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수")
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(x=cut, y=price)) + geom_bar(stat='identity')
# 7-3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(cut, color, fill=price)) +
geom_bar(stat='identity', position = 'dodge') + coord_flip()
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(x=cut, fill=price)) + geom_bar(stat='identity')
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(x=cut, fill=price)) + geom_bar(stat='identity')
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(x=cut, fill=price)) + geom_bar(stat='identity')
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(x=cut, y=price)) + geom_bar(stat='identity')
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(cut, price)) + geom_bar(stat='identity')
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(cut, fill=price)) + geom_bar(stat='identity')
knitr::opts_chunk$set(echo = TRUE)
coord_flip()
# 7-3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(cut, color, fill=price)) +
geom_bar(stat='identity', position = 'dodge') + coord_flip()
# 7-3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(cut, color, fill=price)) +
geom_bar(stat='identity', position = 'dodge')
+ coord_flip()
# 7-3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(cut, color, fill=price)) +
geom_bar(stat='identity', position = 'dodge') + coord_flip()
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(fill="blue")
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(color=factor(am))
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(color=factor(am))
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(color="rainbow")
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(color="red","orange","yellow")
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(color="red","orange","yellow")
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(color="red","orange")
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(fill="red","orange")
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(fill="red")
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(fill="red","yellow")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수") + scale_color_manual(values=c("red","yellow"))
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_point() + ggtitle("컷의 돗수") + scale_color_manual(values=c("red","yellow"))
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_point() + ggtitle("컷의 돗수") + scale_color_manual(values=c("red","yellow"))
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut, y=count), fill="blue") + geom_point() + ggtitle("컷의 돗수") + scale_color_manual(values=c("red","yellow"))
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut, y=count), fill="blue") + geom_bar() + ggtitle("컷의 돗수") + scale_color_manual(values=c("red","yellow"))
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수") + scale_color_manual(values=c("red","yellow"))
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(fill="skyblue") + ggtitle("컷의 돗수")
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(cut, price)) + geom_bar(stat='identity', fill="indigo")
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(cut, price)) + geom_bar(stat='identity', fill="pastel yellow")
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(cut, price)) + geom_bar(stat='identity', fill="pink")
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(cut, price)) + geom_bar(stat='identity', fill="pink") + ggtitle("컷에 따른 가격변화")
# 7-3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(cut, color, fill=price)) +
geom_bar(stat='identity', position = 'dodge') + coord_flip() + ggtitle("컷과 컬러에 따른 가격변화")
# 7-3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(cut, color, fill=price)) +
geom_bar(stat='identity', position = 'dodge', fill=yellow) + coord_flip() + ggtitle("컷과 컬러에 따른 가격변화")
# 7-3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(cut, color, fill=price)) +
geom_bar(stat='identity', position = 'dodge') + coord_flip(fill=yellow) + ggtitle("컷과 컬러에 따른 가격변화")
# 7-3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(cut, color, fill=price)) +
geom_bar(fill="yellow", stat='identity', position = 'dodge') + coord_flip() + ggtitle("컷과 컬러에 따른 가격변화")
# 7-3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(cut, color, fill=price)) +
geom_bar(stat='identity', position = 'dodge', fill="yellow") + coord_flip() + ggtitle("컷과 컬러에 따른 가격변화")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(fill="skyblue") + ggtitle("컷의 돗수")
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(cut, price)) + geom_bar(stat='identity', fill="pink") + ggtitle("컷에 따른 가격변화")
# 7-3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(cut, color, fill=price)) +
geom_bar(stat='identity', position = 'dodge', fill="yellow") + coord_flip() + ggtitle("컷과 컬러에 따른 가격변화")
# 7-3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(cut, color, fill=price)) +
geom_bar(stat='identity', position = 'dodge', fill="purple") + coord_flip() + ggtitle("컷과 컬러에 따른 가격변화")
# 7-3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(cut, color, fill=price)) +
geom_bar(stat='identity', position = 'dodge') + coord_flip() + ggtitle("컷과 컬러에 따른 가격변화")
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(fill="red","yellow")
# 6. class(자동차 종류)가 "compact", "subcompact", "suv"인 자동차의 cty(도시 연비)가 어떻게 다른지 비교해보려고 합니다.
#세 차종의 cty를 나타낸 상자 그림을 만들어보세요.
class <- filter(mpg, class == "compact" | class == "subcompact" | class == "suv")
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(fill="red","yellow")
ggplot(class, aes(x=class, y=cty)) + geom_boxplot()
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(fill="red","yellow")
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(fill="red")
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(fill="red") + geom_bw
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(fill="red") + geom_bw
ggplot(class, aes(x=class, y=cty)) + geom_bw + geom_boxplot(fill="red") +
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(fill="skyblue") + ggtitle("컷의 돗수")
ggplot(class, aes(x=class, y=cty)) + geom_bw() + geom_boxplot(fill="red") +
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(fill="skyblue") + ggtitle("컷의 돗수")
library(gridExtra)
ggplot(class, aes(x=class, y=cty)) + geom_bw() + geom_boxplot(fill="red") +
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(fill="skyblue") + ggtitle("컷의 돗수")
# 6. class(자동차 종류)가 "compact", "subcompact", "suv"인 자동차의 cty(도시 연비)가 어떻게 다른지 비교해보려고 합니다.
#세 차종의 cty를 나타낸 상자 그림을 만들어보세요.
class <- filter(mpg, class == "compact" | class == "subcompact" | class == "suv")
ggplot(class, aes(x=class, y=cty)) + geom_bw() + geom_boxplot(fill="red") +
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(fill="skyblue") + ggtitle("컷의 돗수")
ggplot(class, aes(x=class, y=cty)) + geom_bw() + geom_boxplot(fill="red") +
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(fill="skyblue") + ggtitle("컷의 돗수")
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(cut, price)) + geom_bar(stat='identity', fill="pink") + ggtitle("컷에 따른 가격변화")
ggplot(class, aes(x=class, y=cty)) + geom_bw() + geom_boxplot(fill="red") +
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(fill="skyblue") + ggtitle("컷의 돗수")
ggplot(class, aes(x=class, y=cty)) + geom_bw() + geom_boxplot(fill="red") +
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(fill="skyblue") + ggtitle("컷의 돗수")
ggplot(class, aes(x=class, y=cty)) + geom_bw() + geom_boxplot(fill="red") +
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(fill="skyblue") + ggtitle("컷의 돗수")
ggplot(class, aes(x=class, y=cty)) + geom_bw() + geom_boxplot(fill="red") +
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(fill="skyblue") + ggtitle("컷의 돗수")
ggplot(class, aes(x=class, y=cty)) + geom_bw() + geom_boxplot(fill="red")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(fill="skyblue") + ggtitle("컷의 돗수")
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(cut, price)) + geom_bar(stat='identity', fill="pink") + ggtitle("컷에 따른 가격변화")
# 6. class(자동차 종류)가 "compact", "subcompact", "suv"인 자동차의 cty(도시 연비)가 어떻게 다른지 비교해보려고 합니다.
#세 차종의 cty를 나타낸 상자 그림을 만들어보세요.
class <- filter(mpg, class == "compact" | class == "subcompact" | class == "suv")
ggplot(class, aes(x=class, y=cty)) + geom_bw() + geom_boxplot(fill="red")
ggplot(class, aes(x=class, y=cty)) + geom_boxplot(fill="red")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(aes(color=factor(am))) + ggtitle("컷의 돗수")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(aes(color="rainbow")) + ggtitle("컷의 돗수")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(aes(color="am")) + ggtitle("컷의 돗수")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(aes(color=factor(am))) + ggtitle("컷의 돗수")
# 1. mpg 데이터의 cty(도시 연비)와 hwy(고속도로 연비) 간에 어떤 관계가 있는지 알아보려고 합니다.
#x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.
ggplot(mpg, aes(x=cty, y=hwy, group=1)) + geom_point()
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar(aes(color=factor(am))) + ggtitle("컷의 돗수")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut), fill="blue") + geom_bar() + ggtitle("컷의 돗수")
# 7. Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 7-1. cut의 돗수를 보여주는 그래프를 작성하세요.
ggplot(diamonds, aes(x=cut, fill=cut)) + geom_bar() + ggtitle("컷의 돗수")
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(cut, price)) + geom_col() + ggtitle("컷에 따른 가격변화")
diamonds %>% group_by(cut) %>% summarize(count=n())
df_cut <- diamonds %>% group_by(cut) %>% summarize(count=n())
ggplot(df_cut, aes(x=cut, y=count, fill=cut)) + geom_col()
ggplot(df_cut, aes(x=cut, y=count, fill=cut)) + geom_col()
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(cut, price)) + geom_col() + ggtitle("컷에 따른 가격변화")
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes((cut, price),fill=cut) + geom_col() + ggtitle("컷에 따른 가격변화")
# 7-2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
ggplot(data=diamonds, aes(cut, price) + geom_col() + ggtitle("컷에 따른 가격변화")
ggplot(df_cut, aes(x=cut, y=count, fill=cut)) + geom_col()
df_cut <- diamonds %>% group_by(cut) %>% summarize(count=n())
ggplot(df_cut, aes(x=cut, y=count, fill=cut)) + geom_col()
lisetwd("d:/Workspace/TIL/R_Data_Analysis/Part2/Stage1_Word cloud/연습문제/")
library(KoNLP)
lisetwd("d:/Workspace/TIL/R_Data_Analysis/Part2/Stage1_Word cloud/연습문제/")
library(KoNLP)
lisetwd("d:/Workspace/TIL/R_Data_Analysis/Part2/Stage1_Word cloud/연습문제/")
setwd("d:/Workspace/TIL/R_Data_Analysis/Part2/Stage1_Word cloud/연습문제/")
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
library(stringr)
useSejongDic()
data1 <- readLines("응답소_2015_01")
data1 <- readLines("응답소_2015_01.txt")
data2 <- sapply(data1, extractNoun, USE.NAMES=F)
data2
data2
head(unlist(data2), 30)
data3 <- unlist(data2)
data3 <- unlist(data2) ;data3
data2 <- str_replace_all(data3, "[^[:alpha:]]", "")
data3 <- Filter(function(x) {nchar(x) <= 6}, 30)
data3 <- Filter(function(x) {nchar(x) <= 6}, data3)
head(unlist(data3), 30)
data3 <- Filter(function(x) {nchar(x) <= 6}, data3)
head(unlist(data3), 30)
data3 <- unlist(data2) ;data3
data2 <- str_replace_all(data3, "[^[:alpha:]]", "")
data2 <- str_replace_all(data3, "[^[:alpha:]]", "") ;data2
data3 <- str_replace_all(data3, "[^[:alpha:]]", "") ;data2
data3 <- Filter(function(x) {nchar(x) <= 6}, data3)
data3 <- Filter(function(x) {nchar(x) <= 6}, data3) ;data3
head(unlist(data3), 30)
data3 <-gsub("제목" ,"", data3)
data3 <-gsub("안녕" ,"", data3)
data3 <-gsub("님" ,"", data3)
data3 <-gsub("한한" ,"", data3)
data3 <-gsub("한" ,"", data3)
data3 <-gsub("귀" ,"", data3)
data3 <- Filter(function(x) {nchar(x) <= 6}, {nchar(x) > 1}, data3) ;data3
data3 <- Filter(function(x) {nchar(x) <= 6 & > 1}, data3) ;data3
data3 <- Filter(function(x) {nchar(x) <= 6 & > (x) 1}, data3) ;data3
data3 <- Filter(function(x) {nchar(x) <= 6 & > nchar(x) 1}, data3) ;data3
data3 <- Filter(function(x) {nchar(x) <= 6 & nchar(x) > 1}, data3) ;data3
(unlist(data3), 30)
data3 <- Filter(function(x) {nchar(x) <= 6 & nchar(x) > 1}, data3) ;data3
(unlist(data3), 30)
data3 <-gsub("제목" ,"", data3)
data3 <-gsub("안녕" ,"", data3)
data3 <-gsub("님" ,"", data3)
data3 <-gsub("한" ,"", data3)
data3 <-gsub("귀" ,"", data3)
head(unlist(data3), 30)
data3 <-gsub("시장공개일" ,"", data3)
data3 <-gsub("상담내용" ,"", data3)
data3 <-gsub("있는걸로" ,"", data3)
data3 <-gsub("다름이 아니고" ,"", data3)
data3 <-gsub("생각" ,"", data3)
data3
data3 <-gsub("들이" ,"", data3)
data3 <-gsub("ㅎㅎㅎ" ,"", data3)
data3 <-gsub("ㅎㅎ" ,"", data3)
write(unlist(data3), "응답소1.txt")
data4 <- read.table("응답소1.txt")
data4
data3 <-gsub("추울까봐봐" ,"", data3)
data3 <-gsub("추울까봐" ,"", data3)
data3 <-gsub("사실입니다만" ,"", data3)
data3
write(unlist(data3), "응답소1.txt")
data4 <- read.table("응답소1.txt")
nrow(data4)
wordcount <- table(data4)
wordcount
head(sort(wordcount, decreasing=T), 20)
head(sort(wordcount, decreasing=T), 300)
head(sort(wordcount, decreasing=T), 30)
txt <- readLines("응답소gsub.txt")
txt <- readLines("응답소gsub.txt")
txt <- readLines("응답소gsub.txt")
txt <- readLines("gsub1.txt")
txt <- readLines("gsub1.txt")
txt <- readLines("gsub1.txt")
head(sort(wordcount, decreasing=T), 30)
txt <- readLines("gsub1.txt")
